require 'ncs_navigator/warehouse'

require 'erb'
require 'zip/zip'
require 'pathname'
require 'fileutils'
require 'forwardable'

module NcsNavigator::Warehouse
  class XmlEmitter
    extend Forwardable

    attr_reader :configuration
    attr_reader :filename

    def_delegators :@configuration, :shell, :log

    HEADER_TEMPLATE = ERB.new(<<-XML_ERB)
<?xml version="1.0" encoding="UTF-8" ?>
<!--
  This document was generated by
  NCS Navigator MDES Warehouse #{NcsNavigator::Warehouse::VERSION}
-->
<ncs:recruitment_substudy_transmission_envelope
  xmlns:ncs="http://www.nationalchildrensstudy.gov"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  >
<ncs:transmission_header>
<sc_id><%= sc_id %></sc_id>
<psu_id><%= psu_id %></psu_id>
<specification_version><%= specification_version %></specification_version>
<is_snapshot>true</is_snapshot>
</ncs:transmission_header>
<ncs:transmission_tables>
XML_ERB

    FOOTER_TEMPLATE = <<-XML
</ncs:transmission_tables>
</ncs:recruitment_substudy_transmission_envelope>
XML

    def self.default_filename(configuration)
      psu_type = configuration.mdes.types.detect { |type| type.name =~ /^psu_cl/ }
      unless psu_type
        fail 'Cannot find the PSU code list. Please specify a filename manually.'
      end

      psu_id = configuration.navigator.psus.first.id
      psu_entry =  psu_type.code_list.detect { |cle| cle.value == psu_id }
      unless psu_entry
        fail "Cannot find PSU #{psu_id} in #{psu_type.name}. Please specify a filename manually"
      end

      Pathname.new '%s-%s.xml' % [
        psu_entry.label.split(',', 2).first.downcase.gsub(/\s*county\s*/, '').strip.gsub(' ', '_'),
        Time.now.iso8601.split('T').first.gsub('-', '')
      ]
    end

    def initialize(config, filename)
      @configuration = config
      @filename = case filename
                  when Pathname
                    filename
                  when nil
                    self.class.default_filename(configuration)
                  else
                    Pathname.new(filename.to_s)
                  end
      @record_count = 0
    end

    def emit_xml
      shell.say_line("Exporting to #{filename}")
      log.info("Beginning XML export to #{filename}")

      @start = Time.now
      filename.open('w') do |f|
        f.write HEADER_TEMPLATE.result(binding)

        configuration.models_module.mdes_order.each do |model|
          shell.clear_line_then_say('Writing XML for %33s' % model.mdes_table_name)

          write_all_xml_for_model(f, model)
        end

        f.write FOOTER_TEMPLATE
      end
      @end = Time.now
      msg = "%d records written in %d seconds (%.1f/sec).\n" % [@record_count, emit_time, emit_rate]
      shell.clear_line_then_say(msg)
      log.info(msg)

      shell.say_line("Zipping to #{zip_filename}")
      log.info("Zipping to #{zip_filename}")
      Zip::ZipFile.open(zip_filename, Zip::ZipFile::CREATE) do |zf|
        zf.add(filename.basename, filename)
      end
      log.info("XML export complete")
    end

    def zip_filename
      @zip_filename ||= filename.to_s + '.zip'
    end

    private

    def write_all_xml_for_model(f, model)
      shell.say(' %20s' % '[loading]')
      model.all.each do |instance|
        instance.write_mdes_xml(f, :indent => 3, :margin => 1)
        @record_count += 1

        shell.back_up_and_say(20, '%5d (%5.1f/sec)' % [@record_count, emit_rate])
      end
    end

    def sc_id
      configuration.navigator.sc_id
    end

    def psu_id
      configuration.navigator.psus.first.id
    end

    def specification_version
      configuration.mdes.specification_version
    end

    def emit_time
      (@end || Time.now) - @start
    end

    def emit_rate
      @record_count / emit_time
    end
  end
end
